(require '[analemma.svg :refer [svg rect style]])
(svg (-> (rect 0 0 20 140) (style :fill "black")))
exit
  (require '[tikkba.dom :refer [svg-doc]]
           '[analemma.svg :refer [svg rect]]
           '[analemma.xml :as xml])
  (def doc  (svg-doc 
              (svg 
                (-> 
                  (rect 10 10 400 50)
                  (xml/add-attrs :fill "red")))))
  (def canvas  (svg-doc 
                  (svg 
                    (-> 
                      (rect 10 10 400 50)
                      (xml/add-attrs :fill "red")))))
(class canvas)
  (require '[tikkba.transcoder :as t] :reload)
(class canvas)
  (require '[tikkba.transcoder :as t] :reload)
 (t/to-png doc "/Users/timosulg/temp")
  (t/to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :as t] :reload)
  (t/to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :as t] :reload)
  (t/to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp")
  (to-png canvas "/Users/timosulg/temp" {})
  (to-png canvas "/Users/timosulg/temp/test.png" {})
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png" {})
  (to-jpg canvas "/Users/timosulg/temp/test.png" {})
  (to-jpeg canvas "/Users/timosulg/temp/test.png" {})
  (to-jpeg canvas "/Users/timosulg/temp/test.jpeg" {})
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
  (to-png canvas "/Users/timosulg/temp/test.png" {})
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
  (to-png canvas "/Users/timosulg/temp/test.png" nil)
  (to-png canvas "/Users/timosulg/temp/test.png" :width 50)
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload-all)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
 (require '[tikkba.transcoder :refer :all] :reload)
  (to-png canvas "/Users/timosulg/temp/test.png")
exit
  (require '[tikkba.dom :refer [svg-doc]]
           '[analemma.svg :refer [svg rect]]
           '[analemma.xml :as xml])
  (def canvas  (svg-doc 
                  (svg 
                    (-> 
                      (rect 10 10 400 50)
                      (xml/add-attrs :fill "red")))))
  (require '[tikkba.transcoder :as t] :reload)
  (t/to-png canvas "/Users/timosulg/temp/test.png")
 (t/to-jpeg canvas "/Users/timosulg/temp/test.jpeg") 
  (require '[tikkba.transcoder :as t] :reload)
 (t/to-jpeg canvas "/Users/timosulg/temp/test.jpeg") 
exit
